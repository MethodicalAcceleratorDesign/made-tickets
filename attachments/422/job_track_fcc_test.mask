option, warn, info;
System,"rm -rf temp";
System,"mkdir temp";
System,"ln -fns /afs/cern.ch/user/d/dalena/public/fcc/optics/FCC-hh-lattice/Collider_thin fcc1";
System,"ln -fns /afs/cern.ch/user/d/dalena/public/fcc/optics/FCC-hh-lattice fcc";


!---------------------------------------------------------------;
!           CALL IN SELECTION, MACRO's, SEQUENCE, BEAM, NRJ and OPTICS FILES;
!---------------------------------------------------------------;

!Coll. optics in thin lens
option,-echo,-info;

call,file="fcc1/fcc_hh_thin.seq";
call,file="fcc1/fcc_hh_0300_thin.str";

option, echo, info, twiss_print;

!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++;
!                        Sequence & Beam selection
!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++;

eg   =  50000;
bg   =  eg/pmass;
en   = 2.2e-06;
epsx = en/bg;
epsy = en/bg;

Beam, particle=proton, pc=eg, npart=1e11, ex=epsx, ey=epsy, sequence=FCC_RING;
!!==> gives an error with madx_new

!Beam, particle=proton, pc=eg, npart=1e11, ex=epsx, ey=epsy;
!! ==> works with madx_new

!use, sequence=FCC_RING;
!seqedit, sequence=FCC_RING;
!flatten;
!cycle,start=IPL;
!endedit;

select, flag=twiss, clear;
select, flag=twiss,pattern=MB\.   ,class=multipole,column=name,k0L,k1L,betx,bety,dx,mux,muy;
select, flag=twiss,pattern=MBS\.  ,class=multipole,column=name,k0L,k1L,betx,bety,dx,mux,muy;
select, flag=twiss,class=MCS                      ,column=name,k0L,k1L,betx,bety,dx,mux,muy;

use, sequence=FCC_RING;
twiss;

qx0  = table(summ,q1);
qy0  = table(summ,q2);
dqx0 = table(summ,dq1);
dqy0 = table(summ,dq2);

! save nominal optics parameter at the MB, MBS for b3 correction
select, flag=twiss, clear;
select, flag=twiss,pattern=MB\.   ,class=multipole,column=name,k0L,k1L,betx,bety,dx,mux,muy;
select, flag=twiss,pattern=MBS\.  ,class=multipole,column=name,k0L,k1L,betx,bety,dx,mux,muy;
select, flag=twiss,class=MCS                      ,column=name,k0L,k1L,betx,bety,dx,mux,muy;

use, sequence=FCC_RING;
twiss, file='temp/optics0_MB.mad';

! Error routine and error table
!errors=0;
call,file="fcc/errors/macro_error_new.madx";
call,file="fcc/errors/MBarc_errortable_v0_b3";
!For the madx file
NRJ=50000;
!eoption,seed=%SEEDRAN;
eoption,seed=10;
!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!                Switch ON/OFF some multipole
!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

!exec ON_ALL_MULT;
ON_LSF:=1;             ! to be set to 0 if run is performed on BOINC.

 ON_A1s =  0 ; ON_A1r =  0 ; ON_B1s =  0 ; ON_B1r =  0;
 ON_A2s =  0 ; ON_A2r =  0 ; ON_B2s =  0 ; ON_B2r =  0;
 ON_A3s =  1 ; ON_A3r =  1 ; ON_B3s =  1 ; ON_B3r =  1;
 ON_A4s =  1 ; ON_A4r =  1 ; ON_B4s =  1 ; ON_B4r =  1;
 ON_A5s =  1 ; ON_A5r =  1 ; ON_B5s =  1 ; ON_B5r =  1;
 ON_A6s =  1 ; ON_A6r =  1 ; ON_B6s =  1 ; ON_B6r =  1;
 ON_A7s =  1 ; ON_A7r =  1 ; ON_B7s =  1 ; ON_B7r =  1;
 ON_A8s =  1 ; ON_A8r =  1 ; ON_B8s =  1 ; ON_B8r =  1;
 ON_A9s =  1 ; ON_A9r =  1 ; ON_B9s =  1 ; ON_B9r =  1;
 ON_A10s =  1; ON_A10r =  1; ON_B10s =  1; ON_B10r =  1;
 ON_A11s =  1; ON_A11r =  1; ON_B11s =  1; ON_B11r =  1;
 ON_A12s =  ON_LSF; ON_A12r = ON_LSF; ON_B12s = ON_LSF; ON_B12r =  ON_LSF;
 ON_A13s =  ON_LSF; ON_A13r = ON_LSF; ON_B13s = ON_LSF; ON_B13r =  ON_LSF;
 ON_A14s =  ON_LSF; ON_A14r = ON_LSF; ON_B14s = ON_LSF; ON_B14r =  ON_LSF;
 ON_A15s =  ON_LSF; ON_A15r = ON_LSF; ON_B15s = ON_LSF; ON_B15r =  ON_LSF;

!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!             apply field errors to MB magnets
!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
call,file="fcc/errors/Efcomp_MBarc_rndm.madx";

! save the errors of the main dipoles for b3 correction
select, flag=error, clear;
select, flag=error,pattern=MB\.   ,class=multipole;
select, flag=error,pattern=MBS\.  ,class=multipole;
esave, file='temp/MB.errors';

! compute correction
system,"fcc/errors/corr_MB";
! apply correction
call,file="temp/MB_corr_setting.mad";

l_mcs=0.11;
value, l_mcs;
value, KSRA.H1*l_mcs, KSLB.H1*l_mcs, KSRB.H1*l_mcs, KSLD.H1*l_mcs ;
value, KSRD.H1*l_mcs, KSLF.H1*l_mcs, KSRF.H1*l_mcs, KSLG.H1*l_mcs ;
value, KSRG.H1*l_mcs, KSLH.H1*l_mcs, KSRH.H1*l_mcs, KSLJ.H1*l_mcs ;
value, KSRJ.H1*l_mcs, KSLL.H1*l_mcs, KSRL.H1*l_mcs, KSLA.H1*l_mcs ;


twiss;
qx1  = table(summ,q1);
qy1  = table(summ,q2);
dqx1 = table(summ,dq1);
dqy1 = table(summ,dq2);

value, qx1,qy1,dqx1,dqy1;

value, qx0,qy0,dqx0,dqy0;
!!!********************************************************************************
!!! if errors are applied final rematch
!!!
!!! chromaticity is matched using all sextupoles
!!! we will need to rematch each section again to keep the relative phase advances equal
!!!**********************************************************************************

 match;
 global, q1=qx0, q2=qy0;
 vary, name=kqf.h1, step=1.0E-9;
 vary, name=kqd.h1, step=1.0E-9;
 lmdif,  calls=2000, tolerance=1.0E-14;
 jacobian, calls=150, bisec=3, tolerance=1.0E-14;
 endmatch;

 !use,  sequence=FCC_RING;
 k1sd.la.h1 :=  ksd.h1 ;
 k1sd.lb.h1 :=  ksd.h1 ;
 k1sd.ld.h1 :=  ksd.h1 ;
 k1sd.lf.h1 :=  ksd.h1 ;
 k1sd.lg.h1 :=  ksd.h1 ;
 k1sd.lh.h1 :=  ksd.h1 ;
 k1sd.lj.h1 :=  ksd.h1 ;
 k1sd.ll.h1 :=  ksd.h1 ;
 k1sd.ra.h1 :=  ksd.h1 ;
 k1sd.rb.h1 :=  ksd.h1 ;
 k1sd.rd.h1 :=  ksd.h1 ;
 k1sd.rf.h1 :=  ksd.h1 ;
 k1sd.rg.h1 :=  ksd.h1 ;
 k1sd.rh.h1 :=  ksd.h1 ;
 k1sd.rj.h1 :=  ksd.h1 ;
 k1sd.rl.h1 :=  ksd.h1 ;
 k1sf.la.h1 :=  ksf.h1 ;
 k1sf.lb.h1 :=  ksf.h1 ;
 k1sf.ld.h1 :=  ksf.h1 ;
 k1sf.lf.h1 :=  ksf.h1 ;
 k1sf.lg.h1 :=  ksf.h1 ;
 k1sf.lh.h1 :=  ksf.h1 ;
 k1sf.lj.h1 :=  ksf.h1 ;
 k1sf.ll.h1 :=  ksf.h1 ;
 k1sf.ra.h1 :=  ksf.h1 ;
 k1sf.rb.h1 :=  ksf.h1 ;
 k1sf.rd.h1 :=  ksf.h1 ;
 k1sf.rf.h1 :=  ksf.h1 ;
 k1sf.rg.h1 :=  ksf.h1 ;
 k1sf.rh.h1 :=  ksf.h1 ;
 k1sf.rj.h1 :=  ksf.h1 ;
 k1sf.rl.h1 :=  ksf.h1 ;
 k2sd.la.h1 :=  ksd.h1 ;
 k2sd.lb.h1 :=  ksd.h1 ;
 k2sd.ld.h1 :=  ksd.h1 ;
 k2sd.lf.h1 :=  ksd.h1 ;
 k2sd.lg.h1 :=  ksd.h1 ;
 k2sd.lh.h1 :=  ksd.h1 ;
 k2sd.lj.h1 :=  ksd.h1 ;
 k2sd.ll.h1 :=  ksd.h1 ;
 k2sd.ra.h1 :=  ksd.h1 ;
 k2sd.rb.h1 :=  ksd.h1 ;
 k2sd.rd.h1 :=  ksd.h1 ;
 k2sd.rf.h1 :=  ksd.h1 ;
 k2sd.rg.h1 :=  ksd.h1 ;
 k2sd.rh.h1 :=  ksd.h1 ;
 k2sd.rj.h1 :=  ksd.h1 ;
 k2sd.rl.h1 :=  ksd.h1 ;
 k2sf.la.h1 :=  ksf.h1 ;
 k2sf.lb.h1 :=  ksf.h1 ;
 k2sf.ld.h1 :=  ksf.h1 ;
 k2sf.lf.h1 :=  ksf.h1 ;
 k2sf.lg.h1 :=  ksf.h1 ;
 k2sf.lh.h1 :=  ksf.h1 ;
 k2sf.lj.h1 :=  ksf.h1 ;
 k2sf.ll.h1 :=  ksf.h1 ;
 k2sf.ra.h1 :=  ksf.h1 ;
 k2sf.rb.h1 :=  ksf.h1 ;
 k2sf.rd.h1 :=  ksf.h1 ;
 k2sf.rf.h1 :=  ksf.h1 ;
 k2sf.rg.h1 :=  ksf.h1 ;
 k2sf.rh.h1 :=  ksf.h1 ;
 k2sf.rj.h1 :=  ksf.h1 ;
 k2sf.rl.h1 :=  ksf.h1 ;

 match, chrom;
 global, dq1=dqx0, dq2=dqy0;
 vary,   name=ksf.h1, step=1.0E-9;
 vary,   name=ksd.h1, step=1.0E-9;
 !lmdif,  calls=2000, tolerance=1.0E-7;
 !simplex, calls=200, tolerance=1.0E-7;
 jacobian, calls=50, bisec=3,tolerance=1.0E-7;
 endmatch;

select, flag=error, full;
esave, file=err_dip.out;

if (NRJ<4999.9999) {VRF400:=16.;};
if (NRJ>5000.0000) {VRF400:=32.;};

select, flag=twiss, clear;
!twiss;
twiss,file="last_twiss.10";
!System,"gzip last_twiss.52";
!twiss,file="last_twiss.%SEEDRAN";
!System,"gzip last_twiss.%SEEDRAN";

sixtrack, cavall, radius=0.017;

stop;
